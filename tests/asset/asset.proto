


// Unique Id = hash
//
// Validation: 
//   - content = download data from [url]
//   - assert(sha256(content) = [hash]) 
//   - [hash] is not found in the existing assets
//
message Asset {
  required string a_url = 1; 
    // URL of the document describing the asset 

  required bytes a_hash = 2;
    // SHA256 hash of the document at the given url
    // 
}

// Unique Id = sha256([aa_accepted_transfer_id])  
// 
// Validation
//   * accepted_transfer = get_accepted_transfer_from_id([aa_accepted_transfer_id]) 
//   * assert(not_transfered(accepted_transfer))
//   * transfer = get_transfer_from_id([accepted_transfer.at_transfer_id]) 
//   * pub_key  = [transfer.tr_dest_addr] 
//   * verify([aa_existing_sig], [aa_accepted_transfer_id], [pub_key])  
//
message AcceptedAsset {
  required bytes aa_accepted_transfer_id = 1; 
    // The id of the accepted transfer

  required string aa_existing_sig = 2;
    // sign(aa_accepted_transfer_id, owner_pri_key) (see doc for verification)
}

// Unique Id = sha256([asset].id + [dest_addr])
// 
// 
// Validation:
//   assert(validation([asset]))
//   
//   if [asset].hash in previous_asset
//   then 
//     - transfer = latest_transfer([hash])
//     - assert(is_accepted(transfer))
//     - owner_key= transfer.dest_addr 
//   else 
//     - 
//   - assert(valid_sign(id, [transfer_sig], 
// 
// Note
//   The validtion is more complicated for the case the asset being transfered
//   was previously part of a past transfer. This transfer should both
//   has been accepted and the signature of the transaction must match 
//   the destination address of that transfer. In other only if you own
//   the asset then you can transfer it to another address. 
// 
message Transfer {

  oneof asset {
    // The asset to be transferred 
    Asset tr_new = 1; 
    Accepted_asset tr_accepted = 2;
  }
  
  required bytes tr_dest_addr = 3; 
    // The public key to which the [asset] will be transferred to
}

// Unique Id = sha256(at_asset_id)
message AcceptTransfer {
  required bytes at_transfer_id = 1;
    // The asset to be transfered.  

  required string at_sig = 2; 
}

// Unique Id = sha256(transfer.id | accept_transfer.id)
message Tx {
  oneof t {
    Transfer transfer = 1; 
    AcceptTransfer accept_transfer = 2;
  }
}
