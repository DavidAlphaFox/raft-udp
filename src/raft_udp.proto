option (int32_type) = int_t;

import "raft.proto";

package raft.udp;

message configuration {
  required raft.Configuration     raft_configuration = 1; 
  repeated ServerUdpConfiguration servers_udp_configuration = 2;
    // Note that there is an invariant that this  [servers_udp_configuration] 
    // field should the length of the [nb_of_server] field in the 
    // raft configuration.

  required double compaction_period = 3; 
}

message ServerUdpConfiguration {
  required int32  raft_id       = 1;
    // This is the logical raft identifier for that server. [0 - nb_of_server[.
  required string inet4_address = 2; 
    // IPv4 Internet Address: aaa.bbb.ccc.ddd
  required int32  raft_port     = 3; 
    // Port number. 
  required int32  client_port   = 4; 
    // Port number. 
}

message ClientRequest {
  // Ping request allows the client to query the RAFT server
  // for information. 
  // The RAFT server will reply which server it believed to be 
  // the leader.
  message Ping { 
    required string request_id = 1; 
  }

  // Add log request allows a client to append a log 
  // to the RAFT state machine. 
  message AddLog {
    required string request_id = 1; 
    required bytes  data       = 2;
  }
  oneof t {
    Ping    ping    = 1;
    AddLog  add_log = 2;
  }
}

message ClientResponse {

  message Pong  {
    required string request_id = 1; 
    optional int32  leader_id  = 2;
  }
  message AddLogSuccess  {}
  message AddLogReplicationFailure {}
  message AddLogNotALeader {
    optional int32 leader_id = 1;
  }

  oneof t {
    Pong                     pong                    = 1;
    AddLogSuccess            add_log_success             = 2;
    AddLogReplicationFailure add_log_replication_failure = 3;
    AddLogNotALeader         add_log_not_a_leader        = 4;
  }
}
